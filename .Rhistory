col = "tomato", add = TRUE, lty = 3, lwd = 2)
fit <- lm(days ~ nodes)
fit(10000)
fit
plot(days, nodes, pch = 16)
abline(fit, col = "red")
plot(nodes, days, pch = 16)
abline(fit, col = "red")
predict(fit)
days
predict(fit, newdata = c(31524, 34320))
new <- data.frame(x = seq(31524, 34320))
predict(fit, newdata = new)
fit
fit$coefficients
fit$coefficients["(Intercept)"]
f <- fit$coefficients["nodes"]*31524 + fit$coefficients["(Intercept)"]
f
f <- fit$coefficients["nodes"]*6906 + fit$coefficients["(Intercept)"]
f
fit$coefficients["nodes"]*6906 + fit$coefficients["(Intercept)"]
fit$coefficients["nodes"]*14367 + fit$coefficients["(Intercept)"]
fit$coefficients["nodes"]*24091 + fit$coefficients["(Intercept)"]
fit.2 <- lm(days ~ poly(nodes, 2))
abline(fit.2)
fit.2
poly(nodes, 2)
nodes
fit.2$coefficients[1]
fit.2$coefficients[2]
fit.2$coefficients[3]
fit.2$coefficients[1]+fit.2$coefficients[3]*6906+fit.2$coefficients[3]*6906
fit.2 <- lm(days ~ poly(nodes, 2))
points(nodes, predict(fit.2), type = "l", col = "blue")
fit.2
fit.2$coefficients[1]+fit.2$coefficients[3]*6906+fit.2$coefficients[3]*6906*6906
fit.2$coefficients[1]
fit.2$coefficients[2]
fit.2$coefficients[3]
(6906^2)*0.1393463
nodes
predict(fit.2)
predict(fit.2, 11000)
predict(fit.2, newdata = data.frame(x = 10000:15000))
predict(fit.2, newdata = data.frame(x = seq(10000,15000, length.out = 3)))
summary(fit2)
summary(fit.2)
x <- c(32,64,96,118,126,144,152.5,158)
y <- c(99.5,104.8,108.5,100,86,64,35.3,15)
plot(x, y, pch = 16)
fit2 <- lm( y~poly(x,2))
xx <- seq(30,150, length.out=100)
lines(xx, predict(fit2, data.frame(x=xx)), col='red')
nodes
days
x <- nodes
y <- days
plot(x, y, pch = 16)
fit2 <- lm( y~poly(x,2))
xx <- seq(5000, 40000, length.out=200)
lines(xx, predict(fit2, data.frame(x=xx)), col='red')
plot(x, y, pch = 16, xlim = c(5000, 40000), ylim = c(0, 20))
lines(xx, predict(fit2, data.frame(x=xx)), col='red')
predict(fit2, data.frame(x=xx))
xx
predict(fit2, data.frame(x=xx))[152]
predict(fit2, data.frame(x=xx))[168]
predict(fit2, data.frame(x=xx))[12]
predict(fit2, data.frame(x=xx))[54]
predict(fit2, data.frame(x=c(31524, 34320)))
predict(fit2, data.frame(x=c(nodes, 31524, 34320)))
fit1 <- lm( y~x)
predict(fit1, data.frame(x=c(nodes, 31524, 34320)))
1.71*2
q()
library(biomaRt)
listMarts()
ensembl=useMart("ENSEMBL_MART_ENSEMBL")
listDatasets(ensembl)
grch37 = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", path="/biomart/martservice", dataset="hsapiens_gene_ensembl")
listFilters(grch37)
listAttributes(grch37)
affyids=c("202763_at","209310_s_at","207500_at")
getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene'), filters = 'affy_hg_u133_plus_2', values = affyids, mart = grch37)
listAttributes(grch37)[1:10]
listAttributes(grch37)[1:10,]
listAttributes(grch37)[1:20,]
listAttributes(grch37)[10:30,]
getBM(c("external_gene_name", "ensembl_gene_id", "gene_biotype"), filters = c("chromosome_name", "start", "end", "strand"), values = list(2, 1100000, 1250000), mart = grch37)
getBM(c("external_gene_name", "ensembl_gene_id", "gene_biotype"), filters = c("chromosome_name", "start", "end", "strand"), values = list(2, 1100000, 1250000, "+"), mart = grch37)
getBM(c("external_gene_name", "ensembl_gene_id", "gene_biotype"), filters = c("chromosome_name", "start", "end", "strand"), values = list(2, 32986734, 33086433, "+"), mart = grch37)
getBM(c("external_gene_name", "ensembl_gene_id", "gene_biotype"), filters = c("chromosome_name", "start", "end", "strand"), values = list(21, 32986734, 33086433, "+"), mart = grch37)
getBM(c("external_gene_name", "ensembl_gene_id", "gene_biotype"), filters = c("chromosome_name", "start", "end"), values = list(21, 32986734, 33086433), mart = grch37)
getBM(c("external_gene_name", "ensembl_gene_id", "gene_biotype", "strand"), filters = c("chromosome_name", "start", "end"), values = list(21, 32986734, 33086433), mart = grch37)
listAttributes(grch37)
getBM(c("external_gene_name", "hsapiens_paralog_ensembl_gene"), filters = c("external_gene_name"), values = "SCAF4", mart = grch37)
listAttributes(grch37)[1:30, ]
listAttributes(grch37)[1:50, ]
listAttributes(grch37)[1:70, ]
listAttributes(grch37)[1:100, ]
getBM(c("refsnp_id", "allele"), filters = c("hgnc_symbol"), values = "HTT", mart = grch37)
grep(pattern = "snp", listAttributes(grch37))
help("grep")
grep(pattern = "snp", listAttributes(grch37)[,1])
listAttributes(grch37)[1155, ]
listAttributes(grch37)[1192, ]
listMarts()
reg <- useMart("NSEMBL_MART_FUNCGEN")
reg <- useMart("ENSEMBL_MART_FUNCGEN")
listDatasets(reg)
reg <- useDataset("hsapiens_regulatory_feature")
reg <- useDataset("hsapiens_regulatory_feature", mart = reg)
listAttributes(reg)
listMarts(archive = TRUE)
q()
house <- read.table("../../Downloads/tissue_specificity_rna_any_expressed.tab", sep = "\t", header = T, quote = "", stringsAsFactors = F)
house <- read.table("../../Downloads/tissue_specificity_rna_any_expressed.tab", sep = "\t", header = T, quote = "", stringsAsFactors = F, fill = NA)
head(house)
hippie <- read.table("../../Downloads/hippie_proteome.txt", sep = "\t", quote = "", header = T, stringsAsFactors = F)
tmp <- intersect(house$Gene, hippie$SYMBOL)
house <- house[house$Gene %in% tmp, ]
tail(tmp)
tail(house)
house.final <- house[, c(1:3, 7, 8, 16)]
head(house.final)
colnames(house.final) <- c("SYMBOL", "SYNONYMS", "ENSEMBL", "CLASS", "EVIDENCE", "LOCATION")
head(house.final)
write.table(house.final, file = "hippie_housekeeping.tsv", sep = "\t", row.names = F)
write.table(house.final, file = "hippie_housekeeping.tsv", sep = "\t", row.names = F, quote = "")
write.table(house.final, file = "hippie_housekeeping.tsv", sep = "\t", row.names = F, quote = F)
q()
q()
q()
install.packages("rmarkdown")
q()
q()
q()
load("data/coords_PIN_LH.RData")
quit()
mod(999, 10)
999 %/% 10
999 %/% 100
999 %/% 1000
999 %/% 10
999 / 100
floot(999 / 100)
floor(999 / 100)
floor(999 / 10)
floor(999 / 1)
q()
library(GenomicRanges)
query <- GRanges("A", IRanges(c(1, 2, 10), c(5, 8, 11)))
subject <- GRanges("A", IRanges(c(6, 5, 13), c(10, 10, 15)))
query
subject
distance(query, subject)
distanceToNearest(query, subject)
query <- GRanges(c("A", "B"), IRanges(c(1, 5), width=1))
distanceToNearest(query, subject)
?distance()
?distance
query <- GRanges("chr1", IRanges(1500, 1500))
query
subject <- GRanges("chr1", IRanges(c(1700, 10), c(1700, 10)))
subject
distanceToNearest(query, subject)
subject <- GRanges("chr1", IRanges(c(1700, 10, 1300), c(1700, 10, 1300)))
distanceToNearest(query, subject)
subject
subject <- GRanges("chr1", IRanges(c(1700, 10, 1301), c(1700, 10, 1301)))
distanceToNearest(query, subject)
tmp <- distanceToNearest(query, subject)
tmp
query <- GRanges(c("chr1", "chr20"), IRanges(c(1500, 1500), c(200, 200)))
query <- GRanges(c("chr1", "chr20"), IRanges(c(1500, 200), c(1500, 200)))
distanceToNearest(query, subject)
query <- GRanges(c("chr1", "chr1", "chr20"), IRanges(c(1500, 200, 10), c(1500, 200, 20)))
subject <- GRanges("chr1", IRanges(c(1700, 13, 1301), c(1700, 25, 1301)))
distanceToNearest(query, subject)
subject
query
query <- GRanges(c("chr1", "chr20", "chr1"), IRanges(c(1500, 200, 10), c(1500, 200, 20)))
distanceToNearest(query, subject)
subject
query
query <- GRanges(c("chr1", "chr20", "chr1"), IRanges(c(1500, 200, 26), c(1500, 200, 30)))
distanceToNearest(query, subject)
tmp <- distanceToNearest(query, subject)
queryHits(tmp)
subjectHits(tmp)
distance(tmp)
tmp.distance
tmp.distance()
tmp$distance
as.data.frame(tmp)
q()
q()
load("~/Dropbox/master_imb/data/GWAS.RData")
intra <- gwasM$MAPPED_GENE[gwasM$CODING == "coding_variant"]
intra <- unique(intra)
write(intra, file = "~/Desktop/coding_variants.txt")
cod <- scan("~/Desktop/coding_var_uniprot.tab", what = "character")
load("~/Desktop/Projects/h2_pin/data/PIN.RData")
sum(V(pin)$name[V(pin)$is.tf] %in% cod)
library(igraph)
sum(V(pin)$name[V(pin)$is.tf] %in% cod)
sum(cod %in% V(pin)$name[V(pin)$is.tf])
sum(cod %in% V(pin)$name[V(pin)$is.rec])
length(grep(cod, V(pin)$name[V(pin)$is.tf]))
sum(cod %in% V(pin)$name[V(pin)$is.rec | V(pin)$is.tf])
cod[cod %in% V(pin)$name[V(pin)$is.rec | V(pin)$is.tf]]
3987^12
3987^12+4365^12
4472^12
3987^12+4365^12 == 4472^12
q()
log2(0.0)
log2(0.05)
log(0.05, 5)
help(log)
log(0.05, base=5)
log(0.05, base=10)
log(0.01, base=10)
library(igraph)
library(ggplot2)
library(biomaRt)
options(stringsAsFactors = F)
load("data/gMedianNetwork.RData")
#Read gene-disease associations
menche <- read.table("data/DataS2_Menche_disease_genes.tsv", header = T, sep = "\t", quote = "", stringsAsFactors = F)
# mapping from ensembl to HGNC symbols
# load mart and datasets
ensembl <- useMart("ENSEMBL_MART_ENSEMBL")
ensembl <- useDataset("hsapiens_gene_ensembl", mart=ensembl)
#Read TF-target regulatory data
reg <- read.table("data/trrust_rawdata.txt", sep = "\t", quote = "", stringsAsFactors = F, col.names = c("tf", "target", "mode", "pubmed"))
# map the hgnc_symbols to entrez IDs in the reg dataframe
map <- getBM(attributes = c("hgnc_symbol", "entrezgene"), filters = "hgnc_symbol", values = unique(reg$tf), mart = ensembl)
map <- map[!duplicated(map$hgnc_symbol),]
colnames(map) <- c("tf", "tfEntrezgene")
map$tfEntrezgene[map$tfEntrezgene == 26148] <- 84458
map <- rbind(map, data.frame(tf = c("MLL2", "KMT2C", "KMT2B"), tfEntrezgene = c(100512962, 58508, 9757)))
reg <- merge(reg, map)
map <- getBM(attributes = c("hgnc_symbol", "entrezgene"), filters = "hgnc_symbol", values = unique(reg$target), mart = ensembl)
map <- map[!duplicated(map$hgnc_symbol),]
map$entrezgene[c(823, 985, 1429, 1902)] <- c(441490, 3118, 4583, 12)
colnames(map) <- c("target", "targEntrezgene")
map <- rbind(map, data.frame(target = c("IGH", "TRA", "TRB", "FIGF", "MFI2", "TOMM70A", "PPP2R4", "BAI1", "TRAP", "COX1", "IGK", "CGB", "ACT",
"ERO1L", "ADRBK1", "CD97", "IGJ"),
targEntrezgene = c(3492, 6955, 6957, 2277, 4241, 9868, 5524, 575, 100187907, 4512, 50802, 1082, 389036, 30001,
156, 976, 3512)))
reg <- merge(reg, map)
# outdated entrez IDs in PIN
V(gMedian)$name[V(gMedian)$name == 4950] <- 100506658
V(gMedian)$name[V(gMedian)$name == 727738] <- 374
V(gMedian)$name[V(gMedian)$name == 7449] <- 3685
# choose a couple of diseases first
menche <- menche[c(72, 109, 212),]
#Label protein network nodes as TFs
V(gMedian)$is.tf <- V(gMedian)$symbol %in% reg$tf
# datatframe 'diseases' stores for all selected diseases their resulting module genes and the step in which they were added to the module
diseases <- data.frame()
for (i in 1:1) {
# choose starter module genes and add them to dataframe 'module', which stores the module genes and the iteration round in which they were added
module.genes <- union(unlist(strsplit(menche$OMIM_genes[i], ";")), unlist(strsplit(menche$GWAS_genes[i], ";")))
idx <- which(V(gMedian)$name %in% module.genes)
idx <- V(gMedian)$name[idx]
module <- data.frame(moduleGenes = idx, step = rep(0, times = length(idx)))
for (j in 1:20) {
# get disease proteins
tfGenes <- which(V(gMedian)$name %in% module$moduleGenes)
# identify the transcription factors
tfGenes <- which(V(gMedian)$name[tfGenes] %in% reg$tfEntrezgene)
# create temporary dataframe tfTargets storing the targets of the TFs, remove duplicates and those, that are already in module
tfTargets <- data.frame(moduleGenes = reg$targEntrezgene[tfGenes], step = rep(j, times = length(tfGenes)))
tfTargets <- tfTargets[!duplicated(tfTargets),]
tfTargets <- tfTargets[!(tfTargets$moduleGenes %in% module$moduleGenes),]
# add targets to module
module <- rbind(module, tfTargets)
}
ggplot(module, aes(x = factor(step))) + geom_bar()
diseases <- rbind(diseases, data.frame(disease = rep(menche$disease[i], times = nrow(module)),
moduleGenes = module$moduleGenes,
step = module$step))
}
q()
m <- matrix(runif(15), 5, 3)
m
m[1:3, 1:3]
m[1:3, 1:3][]
m[1:3, 1:3][,]
m <- matrix(runif(15), 6, 3)
m <- matrix(runif(18), 6, 3)
t.test(m[1:3, 1:3], m[4:6, 1:3])
m[1:3, 1:3][1:9]
t.test(m[1:3, 1:3][1:9], m[4:6, 1:3][1:9])
seq(1, 12, by 3)
seq(1, 12, by = 3)
q()
q()
runif(15)
log10(1000000)
log(1000000)
q()
r <- rnorm(1000, mean = 10, sd = 2)
hist(r, breaks = 100)
max(r)
r <- c(r, 17.5, 17.5, 18, 18, 20.5, 25)
mean(r)
hist(r, breaks = 100)
r <- rnorm(1000, mean = 10, sd = 2)
r <- rnorm(50, mean = 10, sd = 2)
hist(r, breaks = 10)
mean(r)
r <- c(r, 17.5, 17.5, 18, 18, 20.5, 25)
mean(r)
library(ggplot2)
head(mtcars)
ggplot(mtcars, aes(mpg, cyl)) + geom_point()
ggplot(mtcars, aes(cyl, mpg)) + geom_boxplot()
ggplot(mtcars, aes(factor(cyl), mpg)) + geom_boxplot()
plot.mpg <- ggplot(mpg, aes(x = cty, y = hwy, colour = factor(cyl))) +
geom_point(size=2.5)
plot.diamonds <- ggplot(diamonds, aes(clarity, fill = cut)) + geom_bar() +
theme(axis.text.x = element_text(angle=70, vjust=0.5))
library(cowplot)
plot2by2 <- plot_grid(plot.mpg, plot.diamonds, labels=c("A", "B"), nrow = 1, ncol = 2)
save_plot("~/Desktop/plot2by2.pdf", plot2by2,
ncol = 2, # we're saving a grid plot of 2 columns
nrow = 2, # and 2 rows
# each individual subplot should have an aspect ratio of 1.3
base_aspect_ratio = 1.3
)
plot.mpg
plot.mpg <- ggplot(mpg, aes(x = cty, y = hwy, colour = factor(cyl))) +
geom_point(size=2.5) + theme_bw()
plot.mpg
plot.diamonds <- ggplot(diamonds, aes(clarity, fill = cut)) + geom_bar() +
theme(axis.text.x = element_text(angle=70, vjust=0.5)) + theme_bw()
plot.diamonds
save_plot("~/Desktop/plot2by2.pdf", plot2by2,
ncol = 2, # we're saving a grid plot of 2 columns
nrow = 1, # and 2 rows
# each individual subplot should have an aspect ratio of 1.3
base_aspect_ratio = 1.3
)
plot_grid(plot.mpg, plot.diamonds, labels=c("A", "B"), nrow = 2, ncol = 2)
plot_grid(plot.mpg, NA, plot.diamonds, labels=c("A", "B"), nrow = 2, ncol = 2)
plot_grid(plot.mpg, NULL, plot.diamonds, labels=c("A", "B"), nrow = 2, ncol = 2)
plot_grid(plot.mpg, NULL, plot.diamonds, labels=c("A", "", "C"), nrow = 2, ncol = 2)
plot_grid(plot.mpg, NULL, plot.diamonds, labels=c("A", "", "B"), nrow = 2, ncol = 2)
help("draw_plot")
ggdraw()+draw_plot(plot.mpg, 0, 0.5) + draw_plot(plot.mpg, 0.5, 0.5) + draw_plot(plot.diamonds, 0, 0)
ggdraw()+draw_plot(plot.mpg, 0, 0.5, 0.5, 0.5) + draw_plot(plot.mpg, 0.5, 0.5, 0.5, 0.5) + draw_plot(plot.diamonds, 0, 0, 1, 0.5)
ggdraw()+draw_plot(plot.mpg, 0, 0.5, 0.5, 0.5) + draw_plot(plot.mpg, 0.5, 0.5, 0.5, 0.5) + draw_plot(plot.diamonds, 0, 0, 1, 0.5) + draw_plot_label(letters[1:3], c(0, 0.5, 0), c(1, 1, 0.5), size = 10)
ggdraw()+draw_plot(plot.mpg, 0, 0.5, 0.5, 0.5) + draw_plot(plot.mpg, 0.5, 0.5, 0.5, 0.5) + draw_plot(plot.diamonds, 0, 0, 1, 0.5) + draw_plot_label(letters[1:3], c(0, 0.5, 0), c(1, 1, 0.5), size = 15)
f <- ggdraw()+draw_plot(plot.mpg, 0, 0.5, 0.5, 0.5) + draw_plot(plot.mpg, 0.5, 0.5, 0.5, 0.5) + draw_plot(plot.diamonds, 0, 0, 1, 0.5) + draw_plot_label(letters[1:3], c(0, 0.5, 0), c(1, 1, 0.5), size = 15)
save_plot("~/Desktop/f_test.pdf", f,
ncol = 2, # we're saving a grid plot of 2 columns
nrow = 2, # and 2 rows
# each individual subplot should have an aspect ratio of 1.3
base_aspect_ratio = 1.3
)
library(psModel)
net <- ps.model(100, 10, 2.3, 0)
plot_hyperbolic_net(net[[1]], net[[2]], net[[2]]$theta)
help("ps.model")
help("hyperbolic_dis")
help("hyperbolic_dist")
remove.packages("psModel")
q()
library(ggplot2)
head(mpg)
head(diamonds)
ggplot(mpg, aes(cty, hwy))+geom_point() + labs(title(expression(beta +frac(miles, gallon))))
q <- ggplot(mpg, aes(cty, hwy))+geom_point()
q + labs(title(expression(beta +frac(miles, gallon))))
q + labs(title = expression(beta +frac(miles, gallon)))
beta
beta[1]
help(expression)
expression(theta)
q + labs(title = expression(theta))
q()
setwd("1_labnehm_cran/")
library(devtools)
document()
remove.packages("NetHypGeom")
remove.packages("NetHypGeom")
library(pracma)
precision_recall <- function(to_be_found, num_to_be_found, data, stepsize = 1) {
precision = rep(0, times = length(data)/stepsize)
recall = rep(0, times = length(data)/stepsize)
j <- 1
for(i in seq(1, length(data), by = stepsize)) {
count <- sum(data[1:i] == to_be_found)
precision[j] <- count / i
recall[j] <- count / num_to_be_found
j <- j + 1
}
# trapz computes the area under the curve
return(trapz(recall[seq(1,length(data),stepsize)],precision[seq(1,length(data),stepsize)]))
}
num_repetitions <- 10
classifyers <- rep(0, times = num_repetitions)
to_be_found <- iris$Species[1]
num_to_be_found <- sum(iris$Species == to_be_found)
for(i in 1:num_repetitions) {
classifyers[i] <- precision_recall(to_be_found = to_be_found, num_to_be_found = num_to_be_found, data = sample(iris$Species), stepsize = 5)
}
to_be_found
precision_recall <- function(to_be_found, num_to_be_found, data, stepsize = 1) {
precision = rep(0, times = length(data)/stepsize)
recall = rep(0, times = length(data)/stepsize)
j <- 1
for(i in seq(1, length(data), by = stepsize)) {
count <- sum(data[1:i] == to_be_found)
precision[j] <- count / i
recall[j] <- count / num_to_be_found
j <- j + 1
}
# trapz computes the area under the curve
return(trapz(recall,precision))
}
num_repetitions <- 10
classifyers <- rep(0, times = num_repetitions)
to_be_found <- iris$Species[1]
num_to_be_found <- sum(iris$Species == to_be_found)
for(i in 1:num_repetitions) {
classifyers[i] <- precision_recall(to_be_found = to_be_found, num_to_be_found = num_to_be_found, data = sample(iris$Species), stepsize = 5)
}
plot(classifyers)
sample(iris$Species)
to_be_found
pred <- c(rep("setosa", 10), rep("xxx", 100))
pred
classifyers[i] <- precision_recall(to_be_found = to_be_found, num_to_be_found = num_to_be_found, data = pred, stepsize = 1)
plot(classifyers)
classifyers <- precision_recall(to_be_found = to_be_found, num_to_be_found = num_to_be_found, data = pred, stepsize = 1)
precision_recall <- function(to_be_found, data, stepsize = 1) {
precision = rep(0, times = length(data)/stepsize)
recall = rep(0, times = length(data)/stepsize)
num_to_be_found <- length(data)
j <- 1
for(i in seq(1, length(data), by = stepsize)) {
count <- sum(data[1:i] == to_be_found)
precision[j] <- count / i
recall[j] <- count / num_to_be_found
j <- j + 1
}
# trapz computes the area under the curve
return(trapz(recall,precision))
}
precision_recall <- function(to_be_found, data, stepsize = 1) {
precision = rep(0, times = length(data)/stepsize)
recall = rep(0, times = length(data)/stepsize)
num_to_be_found <- sum(data %in% to_be_found)
j <- 1
for(i in seq(1, length(data), by = stepsize)) {
count <- sum(data[1:i] %in% to_be_found)
precision[j] <- count / i
recall[j] <- count / num_to_be_found
j <- j + 1
}
# trapz computes the area under the curve
return(trapz(recall,precision))
}
classifyers <- precision_recall(to_be_found = to_be_found, num_to_be_found = num_to_be_found, data = pred, stepsize = 1)
classifyers <- precision_recall(to_be_found = to_be_found, data = pred, stepsize = 1)
classifyers <- precision_recall(to_be_found = to_be_found, data = pred[1:10], stepsize = 1)
pred[1:10]
precision_recall <- function(to_be_found, data, stepsize = 1) {
precision = rep(0, times = length(data)/stepsize)
recall = rep(0, times = length(data)/stepsize)
num_to_be_found <- sum(data %in% to_be_found)
j <- 1
for(i in seq(1, length(data), by = stepsize)) {
count <- sum(data[1:i] %in% to_be_found)
precision[j] <- count / i
recall[j] <- count / num_to_be_found
j <- j + 1
}
# trapz computes the area under the curve
return(trapz(c(0, recall), c(1, precision)))
}
classifyers <- precision_recall(to_be_found = to_be_found, data = pred[1:10], stepsize = 1)
classifyers <- precision_recall(to_be_found = to_be_found, data = pred, stepsize = 1)
pred
pred[c(2, 5)] <- "xxx"
classifyers <- precision_recall(to_be_found = to_be_found, data = pred, stepsize = 1)
to_be_found <- letters[1:5]
to_be_found
pred <- sample(letters[1:10], 100, replace = T)
pred
pred <- letters[1:10]
pred
classifyers <- precision_recall(to_be_found = to_be_found, data = pred, stepsize = 1)
to_be_found
pred
keep <- seq(0.9, 0.5, by = -0.1)
keep
load("~/Dropbox/master_imb/data/menche_filtered.RData")
menche$disease
length(menche$disease.genes[[179]])
length(menche$disease.genes[[6]])
length(menche$disease.genes[[64]])
length(menche$disease.genes[[65]])
length(menche$disease.genes[[40]])
2*pi*0.15^2
0.1413*180/pi
(pi/12)*180/pi
q()
